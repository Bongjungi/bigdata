-- [X] VIEW, INLINE VIEW, TOP-N구문
-- 1. VIEW : 가상의 테이블 (메모리 공간을 차지하지 않는다.) (1)단순뷰 (2)복합뷰
-- (1) 단순뷰 : 하나의 테이블로 구성한 뷰
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, JOB, DEPTNO FROM EMP;
SELECT * FROM USER_VIEWS; --DDL을 수행하면 데이터 딕셔너리가 자동 수정.
SELECT * FROM EMPv0;
SELECT * FROM EMP;
INSERT INTO EMPv0 VALUES (9000,'홍','MANAGER',40); --VIEW에 추가.
UPDATE EMPv0 SET JOB='ALALYST' WHERE EMPNO=9000; -- VIEW를 수정.
DELETE FROM EMPv0 WHERE EMPNO=9000;
CREATE OR REPLACE VIEW EMPv0
    AS SELECT * FROM EMP WHERE DEPTNO=30;
INSERT INTO EMPv0 VALUES (1111,'홍',NULL,NULL,NULL,NULL,NULL,30); -- 추가됌
SELECT * FROM EMPv0 WHERE EMPNO=1111;
INSERT INTO EMPv0 VALUES(1112,'김',NULL,NULL,NULL,NULL,NULL,40); -- 추가됌
DELETE FROM EMPv0 WHERE EMPNO<2000; -- '홍'은 삭제되고 '김'은 삭제 안됌.
CREATE OR REPLACE VIEW EMPv0
    AS SELECT ENAME ,JOB FROM EMP; -- 뷰 생성시 NOT NULL 필드 미포함.
INSERT INTO EMPv0 VALUES ('홍홍', 'OKMAN'); --에러 EMP에 못넣음.

-- WITH CHECK OPTION
CREATE OR REPLACE VIEW EMPv0
    AS SELECT * FROM EMP WHERE DEPTNO=30
    WITH CHECK OPTION;-- 조건에 맞는 경우만 삽입, 삭제, 수정 가능
INSERT INTO EMPv0 VALUES(1111,'홍',NULL,NULL,NULL,NULL,NULL,30);
INSERT INTO EMPv0 VALUES(1112,'박',NULL,NULL,NULL,NULL,NULL,40);--오류 WITH CHECK OPTION(DEPTNO=30에 어긋남)
-- WITH READ ONLY
CREATE OR REPLACE VIEW EMPv1
    AS SELECT * FROM EMP WHERE DEPTNO=20 WITH READ ONLY;--읽기 전용 뷰
SELECT E.* FROM EMPv1 E, DEPT D WHERE E.DEPTNO=D.DEPTNO;
INSERT INTO EMPv1 VALUES (11114,'윤', NULL, NULL,NULL,NULL,NULL,20); --READ ONLY라서 INSERT DELETE UPDATE 안됌 읽기만 됌.

-- (2) 복합뷰 : 2개 이상의 테이블로 구성한 뷰
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, JOB, DNAME FROM DEPT D, EMP E WHERE E.DEPTNO=D.DEPTNO;
INSERT INTO EMPv0 VALUES (1200,'홍','MANAGER','RESEARCH'); --복합뷰는 갱신 불가. 자동으로 읽기 전용

-- 컬럼에 별칭을 이용하여 뷰를 생성
CREATE OR REPLACE VIEW EMPv1
    AS SELECT EMPNO NO, ENAME NAME, SAL*12 YEAR_SAL FROM EMP WHERE DEPTNO=10; --SAL*12 때문에 갱신 불가. YEAR_SAL이라는 별칭 안 쓰고 SAL*12로 냅두면 에러.
SELECT * FROM EMPv1;
INSERT INTO EMPv1 VALUES(1000,'홍',12000);
CREATE OR REPLACE VIEW EMPv1 (EMPNO, ENAME,YEAR_SAL)  -- 별칭을 이렇게 쓸수도 있다.
    AS SELECT EMPNO, ENAME, SAL*12 FROM EMP WHERE DEPTNO=10;
-- 사번, 이름, 10의 자리에서 반올림한 SAL을 뷰 생성.
CREATE OR REPLACE VIEW EMPv0
    AS SELECT EMPNO, ENAME, ROUND(SAL,-2) SAL FROM EMP;
    SELECT * FROM EMPv0;
-- 부서번호, 최소급여, 최대급여, 부서평균급여를 포함한 DEPTv1 뷰를 생성
CREATE OR REPLACE VIEW EMPv0 (DEPTNO, MINSAL, MAXSAL, AVGSAL)
    AS SELECT DEPTNO, MIN(SAL) MINSAL, MAX(SAL) MAXSAL, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO;
-- 부서번호, 부서명, 최소급여, 최대급여, 평균급여를 포함한 DEPTv2 뷰를 생성
CREATE OR REPLACE VIEW DEPTv1 (DEPTNO, MINSAL, MAXSAL, AVGSAL)
    AS SELECT DEPTNO, MIN(SAL), MAX(SAL), AVG(SAL) FROM EMP GROUP BY DEPTNO;
CREATE OR REPLACE VIEW DEPTv2
    AS SELECT D.DEPTNO, DNAME, MINSAL, MAXSAL, AVGSAL
    FROM DEPTv1 E, DEPT D
    WHERE E.DEPTNO=D.DEPTNO;
SELECT * FROM DEPTv2;

--DISTINCT 키워드를 이용한 뷰 : 중복이 제거된 JOB, DEPTNO
CREATE OR REPLACE VIEW EMPv0
    AS SELECT DISTINCT JOB, DEPTNO FROM EMP;
SELECT * FROM EMPv0;    
INSERT INTO EMPv0 VALUES ('MANAGER',10); -- DISTINCT를 포함한 뷰는 읽기 전용.



-- 2. INLINE VIEW : FROM절 상의 서브쿼리를 INLINE VIEW라 하며, FROM 절에 오는 서브쿼리는 VIEW처럼 작용.
-- SELECT 필드1, 필드2 ... FROM 테이블명1 ,(서브쿼리) 별칭 WHERE 조건


-- 급여가 2000을 초과하는 사원의 평균 급여
SELECT AVG(SAL) FROM EMP WHERE SAL>2000;
SELECT AVG(SAL) FROM (SELECT SAL FROM EMP WHERE SAL>2000);
--각 부서에서 부서평균급여보다 높은 사원의 이름, 급여 ,부서번호
SELECT ENAME, SAL, DEPTNO FROM EMP E WHERE SAL > (SELECT AVG(SAL) FROM EMP WHERE E.DEPTNO=DEPTNO);
CREATE OR REPLACE VIEW XX
    AS SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO;
-- FROM 절에 올 서브쿼리(1단계)
SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO;
-- 이름, 급여, 부서번호, 부서별평균(2단계)
SELECT E.ENAME, E.SAL, E.DEPTNO, S.DEPTNO, S.AVGSAL 
    FROM EMP E, (SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO) S 
    WHERE ENAME='SCOTT' AND E.DEPTNO=S.DEPTNO;
-- 이름, 급여 ,부서번호(부서별평균보다 높은 사원만) : 3단계
SELECT ENAME, SAL, E.DEPTNO
    FROM EMP E, (SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO) S
    WHERE E.DEPTNO=S.DEPTNO AND SAL>AVGSAL;
    
DELETE FROM EMP WHERE SAL IS NULL;
-- Top-N구문(Top1~10등이나 Top6~20등)
-- ROWNUM : 테이블로부터 가져온 순서
SELECT ROWNUM, ENAME, SAL FROM EMP ORDER BY SAL;
SELECT ROWNUM RN, ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL) WHERE ROWNUM<=10;
SELECT ROWNUM RN, ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL);
-- 함수를 이용한 RANK 출력
SELECT ROWNUM,RANK() OVER(ORDER BY SAL) RANK, DENSE_RANK() OVER(ORDER BY SAL) D_RANK, ROW_NUMBER() OVER(ORDER BY SAL) N_RANK, ENAME, SAL FROM EMP;
-- SAL 기준으로 6~10등
SELECT ROWNUM, RN, ENAME, SAL
    FROM (SELECT ROWNUM RN, ENAME, SAL FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL)) WHERE RN BETWEEN 6 AND 10;
-- 이름을 알파벳 순서대로 정렬해서 6~10등까지 출력(등수, 이름, 사번, JOB, MGR, HIREDATE)
SELECT ENAME, EMPNO, JOB, MGR, HIREDATE FROM EMP ORDER BY ENAME;
SELECT ROWNUM RN, ENAME, EMPNO, JOB, MGR, HIREDATE FROM (SELECT ENAME, EMPNO, JOB, MGR, HIREDATE FROM EMP ORDER BY ENAME);
SELECT RN, ENAME, EMPNO, JOB, MGR, HIREDATE 
    FROM (SELECT ROWNUM RN, ENAME, EMPNO, JOB, MGR, HIREDATE FROM (SELECT ENAME, EMPNO, JOB, MGR, HIREDATE FROM EMP ORDER BY ENAME))
    WHERE RN BETWEEN 6 AND 10;